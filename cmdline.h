/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "ptimes"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "ptimes"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  float latitude_arg;	/**< @brief latitude of desired location.  */
  char * latitude_orig;	/**< @brief latitude of desired location original value given at command line.  */
  const char *latitude_help; /**< @brief latitude of desired location help description.  */
  float longitude_arg;	/**< @brief longitude of desired location.  */
  char * longitude_orig;	/**< @brief longitude of desired location original value given at command line.  */
  const char *longitude_help; /**< @brief longitude of desired location help description.  */
  char * calc_method_arg;	/**< @brief select prayer time calculation method.  */
  char * calc_method_orig;	/**< @brief select prayer time calculation method original value given at command line.  */
  const char *calc_method_help; /**< @brief select prayer time calculation method help description.  */
  char * asr_juristic_method_arg;	/**< @brief select Juristic method for calculating Asr prayer time.  */
  char * asr_juristic_method_orig;	/**< @brief select Juristic method for calculating Asr prayer time original value given at command line.  */
  const char *asr_juristic_method_help; /**< @brief select Juristic method for calculating Asr prayer time help description.  */
  char * high_lats_method_arg;	/**< @brief select adjusting method for higher latituden.  */
  char * high_lats_method_orig;	/**< @brief select adjusting method for higher latituden original value given at command line.  */
  const char *high_lats_method_help; /**< @brief select adjusting method for higher latituden help description.  */
  int dhuhr_minutes_arg;	/**< @brief minutes after mid-way for calculating Dhuhr prayer time.  */
  char * dhuhr_minutes_orig;	/**< @brief minutes after mid-way for calculating Dhuhr prayer time original value given at command line.  */
  const char *dhuhr_minutes_help; /**< @brief minutes after mid-way for calculating Dhuhr prayer time help description.  */
  int maghrib_minutes_arg;	/**< @brief minutes after sunset for calculating Maghrib prayer time.  */
  char * maghrib_minutes_orig;	/**< @brief minutes after sunset for calculating Maghrib prayer time original value given at command line.  */
  const char *maghrib_minutes_help; /**< @brief minutes after sunset for calculating Maghrib prayer time help description.  */
  int isha_minutes_arg;	/**< @brief minutes after Maghrib for calculating Isha prayer time.  */
  char * isha_minutes_orig;	/**< @brief minutes after Maghrib for calculating Isha prayer time original value given at command line.  */
  const char *isha_minutes_help; /**< @brief minutes after Maghrib for calculating Isha prayer time help description.  */
  int fajr_angle_arg;	/**< @brief angle for calculating Fajr prayer time.  */
  char * fajr_angle_orig;	/**< @brief angle for calculating Fajr prayer time original value given at command line.  */
  const char *fajr_angle_help; /**< @brief angle for calculating Fajr prayer time help description.  */
  int maghrib_angle_arg;	/**< @brief angle for calculating Maghrib prayer time.  */
  char * maghrib_angle_orig;	/**< @brief angle for calculating Maghrib prayer time original value given at command line.  */
  const char *maghrib_angle_help; /**< @brief angle for calculating Maghrib prayer time help description.  */
  int isha_angle_arg;	/**< @brief angle for calculating Isha prayer time.  */
  char * isha_angle_orig;	/**< @brief angle for calculating Isha prayer time original value given at command line.  */
  const char *isha_angle_help; /**< @brief angle for calculating Isha prayer time help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int latitude_given ;	/**< @brief Whether latitude was given.  */
  unsigned int longitude_given ;	/**< @brief Whether longitude was given.  */
  unsigned int calc_method_given ;	/**< @brief Whether calc-method was given.  */
  unsigned int asr_juristic_method_given ;	/**< @brief Whether asr-juristic-method was given.  */
  unsigned int high_lats_method_given ;	/**< @brief Whether high-lats-method was given.  */
  unsigned int dhuhr_minutes_given ;	/**< @brief Whether dhuhr-minutes was given.  */
  unsigned int maghrib_minutes_given ;	/**< @brief Whether maghrib-minutes was given.  */
  unsigned int isha_minutes_given ;	/**< @brief Whether isha-minutes was given.  */
  unsigned int fajr_angle_given ;	/**< @brief Whether fajr-angle was given.  */
  unsigned int maghrib_angle_given ;	/**< @brief Whether maghrib-angle was given.  */
  unsigned int isha_angle_given ;	/**< @brief Whether isha-angle was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_config_file() instead
 */
int cmdline_parser_configfile (const char *filename,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_config_file (const char *filename,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_calc_method_values[];  /**< @brief Possible values for calc-method. */
extern const char *cmdline_parser_asr_juristic_method_values[];  /**< @brief Possible values for asr-juristic-method. */
extern const char *cmdline_parser_high_lats_method_values[];  /**< @brief Possible values for high-lats-method. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
